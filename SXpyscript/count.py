# Prelimiarily analyze mapped reads.
# by Ji Huang

import sys
from Bio import SeqIO
from collections import OrderedDict
if len(sys.argv)==1:
    print "type python count.py -h for help."
    sys.exit()

inputfilename=''
outputfilename=''
pfigure=False
for i in range(1,len(sys.argv)):
    if sys.argv[i]=='-i':
        inputfilename=sys.argv[i+1]
    elif sys.argv[i]=='-o':
        outputfilename=sys.argv[i+1]
    elif sys.argv[i]=='-p':
        pfigure= True
    elif sys.argv[i]=='-v':
        print "//Version=0.2,6/19/2014, by Ji Huang"
    elif sys.argv[i]=='-h':
        print "//by Ji HUANG"
        print "Usage:"
        print "python count.py [-i inputfilename] [-o outputfilename] [-p] "
        print ''
        print "-i  inputfilename, fasta, generated by format.py with ot -f, f1 or fn, like >read_1@12"
        print "-o  outputfilename"
        print "-p  plot figures (.png) of read size distrubtion and 5'base bias"
        print "-v  print version of count.py"
        print "-h  this information"
        print "//"
        sys.exit()

if inputfilename=='' or outputfilename=='':
    print "Error in filename input."
    print "Please see help by typing python count.py -h"
    sys.exit()

string1=['seq_len'+'\t'+'Redu_count\t%\tUniq_count\t%\n']
print 'Analyzing...'

seqlen_dic={}
end5_dic={}
total_seq=0
seqlen_uni_dic={}
end5_uni_dic={}
total_uni_seq=0
for seq in SeqIO.parse (open(inputfilename, 'rU'),'fasta'):
    seqlen=len(str(seq.seq))
    if '@' in seq.id:
        seqcount=float(seq.id.split('@')[1])
    else:
        seqcount=1
    end5=str(seq.seq)[0]
    total_seq=total_seq+seqcount
    total_uni_seq+=1
    if seqlen_dic.has_key(seqlen):
        seqlen_dic[seqlen]+=seqcount
        seqlen_uni_dic[seqlen]+=1
    else:
        seqlen_dic[seqlen]=seqcount
        seqlen_uni_dic[seqlen]=1
    if end5_dic.has_key(end5):
        end5_dic[end5]+=seqcount
        end5_uni_dic[end5]+=1
    else:
        end5_dic[end5]=seqcount
        end5_uni_dic[end5]=1

seqlen_dic=OrderedDict(sorted(seqlen_dic.items(), key=lambda t:t[0]))
seqlen_uni_dic=OrderedDict(sorted(seqlen_uni_dic.items(), key=lambda t:t[0]))
print 'Seq_len'+'\t'+'Redu_count'+'\t'+'%'+'\t'+'Uniq_count'+'\t'+'%'
xx=[]
yy=[]
yy1=[]
xxx=[]
yyy=[]
yyy1=[]
for key in seqlen_dic.keys():
    string1.append (str(key)+'\t'+str(seqlen_dic[key])+'\t'+str('%.2f'%(seqlen_dic[key]*100.0/total_seq))+'\t'+str(seqlen_uni_dic[key])+'\t'+str('%.2f'%(seqlen_uni_dic[key]*100.0/total_uni_seq))+'\n')
    print str(key)+'\t'+str(seqlen_dic[key])+'\t'+str('%.2f'%(seqlen_dic[key]*100.0/total_seq)+'\t'+str(seqlen_uni_dic[key])+'\t'+str('%.2f'%(seqlen_uni_dic[key]*100.0/total_uni_seq)))
    xx.append (str(key))
    yy.append (seqlen_dic[key]*100.0/total_seq)
    yy1.append (seqlen_uni_dic[key]*100.0/total_uni_seq)
print 'Total reads:', total_seq
print 'Total unique reads',total_uni_seq
print '***************************'
# calculating the first base
string1.append ('Total reads: '+str(total_seq)+'\n')
string1.append ('Total unique reads'+str(total_uni_seq)+'\n')

string1.append ('**************************\n')
string1.append ('5-end'+'\t'+'Redu_count\t%\tUniq_count\t%\n')
print ('5-end'+'\t'+'Redu_count'+'\tUniq_count\t'+'%')

for k in end5_dic.keys():
    print k+'\t'+str(end5_dic[k])+'\t'+str('%.2f'%(float(end5_dic[k])*100.0/total_seq))+'\t'+str(end5_uni_dic[k])+'\t'+str('%.2f'%(end5_uni_dic[k]*100.0/total_uni_seq))
    string1.append (k+'\t'+str(end5_dic[k])+'\t'+str('%.2f'%(float(end5_dic[k])*100.0/total_seq))+'\t'+str(end5_uni_dic[k])+'\t'+str('%.2f'%(end5_uni_dic[k]*100.0/total_uni_seq))+'\n')
    xxx.append (k)
    yyy.append (end5_dic[k]*100.0/total_seq)
    yyy1.append (end5_uni_dic[k]*100.0/total_uni_seq)
if outputfilename!='':
    w=open(outputfilename, 'w')
    w.writelines (string1)

if pfigure==True:
    print "Ploting..."
    import matplotlib
#mport matplotlib
# Force matplotlib to not use any Xwindows backend.
    matplotlib.use('Agg')
    import matplotlib.pyplot as plt
    #from numpy import arange
    plt.figure ()
    ind=range(len(xx))
    plt.bar(ind,yy, align='center', color='blue', alpha=0.4)
    plt.grid(True)
    plt.xticks(ind,xx, fontsize=15)
    plt.xlabel ('Read length', fontsize=20)
    plt.ylabel ('Frequence (%)',fontsize=20)
    
    plt.title ('Size distribution of all reads',fontsize=21)
    
    plt.savefig (outputfilename+'.redudant.size.png')
    plt.show()
    plt.figure ()
#_tkinter.TclError: no display name and no $DISPLAY environment variable
    ind=range(len(xx))
    plt.bar(ind,yy1, align='center', color='blue', alpha=0.4)
    plt.grid(True)
    plt.xticks(ind,xx,fontsize=15)
    plt.xlabel ('Read length',fontsize=20)
    plt.ylabel ('Frequence (%)',fontsize=20)
    plt.title ('Size distribution of unique reads',fontsize=21)
    plt.savefig (outputfilename+'.unique.size.png')
    
    plt.figure ()

    ind1=range(len(xxx))
    plt.bar(ind1,yyy,align='center',color='blue', alpha=0.4)
    plt.grid(True)
    plt.xticks(ind1,xxx,fontsize=15)
    plt.xlabel ('Base',fontsize=20)
    plt.ylabel ('Frequency (%)',fontsize=20)
    plt.title ('5 base bias of all reads',fontsize=21)
    plt.savefig (outputfilename+'.all.5end.png')
    
    plt.figure ()

    ind1=range(len(xxx))
    plt.bar(ind1,yyy1,align='center',color='blue', alpha=0.4)
    plt.grid(True)
    plt.xticks(ind1,xxx,fontsize=15)
    plt.xlabel ('Base',fontsize=20)
    plt.ylabel ('Frequency (%)',fontsize=20)
    plt.title ('5 base bias of unique reads',fontsize=21)
    plt.savefig (outputfilename+'.unique.5end.png')


    print "Done! four PNG figures saved!"















